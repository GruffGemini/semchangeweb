{% extends 'base.html' %}

{% block head %}
<title>Explore word clusters</title>
<script>var clustersReport = {{ clusters_report }}</script>
<script>var clustersBetween = {{ clusters_between }}</script>
<script src="{{url_for('static', filename='js/read_text_file.js')}}"></script>
<script> var corpus1 = readTextFile("{{url_for('static', filename='data/en/raw_processed_ccoha1.txt')}}") </script>
<script> var corpus2 = readTextFile("{{url_for('static', filename='data/en/raw_processed_ccoha2.txt')}}") </script>
{% endblock %}

{% block body %}
<main role="main" class="container text-center">
    <h1 class="mt-2 mb-2">Explore word clusters</h1>
    <div class="container pt-4 pb-4">
        <div class="h-100 d-flex flex-column bd-highlight">
            <div class="input-group">
                <input type="text" class="form-control" id="input" placeholder="Start typing the word..." autocomplete="off">
            </div>
        </div>
    </div>
    <h2 class="mt-2 mb-2"></h2>
    <div class="chart_line_div">
        <div class="cluster_chart">
            <canvas id="chart1" height="400"></canvas>
        </div>
        <div class="cluster_info">
            <div id="word_change" style="color: red;  display: flex;justify-content: center;align-content: center;flex-direction: column;">
                Word change: {{ max }}
            </div>
            <div id="cluster_change" style="color: black;  display: flex;justify-content: center;align-content: center;flex-direction: column;">
                Cluster change:
            </div>
        </div>
        <div class="cluster_chart">
            <canvas id="chart2" height="400"></canvas>
        </div>
    </div>
    <div class="chart_line_div">
        <div class="cluster_chart" id="text1" style="height:180px;padding:20px;overflow:auto;">Examples from the chosen cluster will be shown here
            <canvas height="50"></canvas>
        </div>
        <div class="cluster_info"></div>
        <div class="cluster_chart" id="text2" style="height:180px;padding:20px;overflow:auto;">Examples from the chosen cluster will be shown here
            <canvas height="50"></canvas>
        </div>
    </div>

    <script>
        var currentWord = "{{ max_word }}"
        var cluster1 = -1
        var cluster2 = -1
        var epochs = Object.keys(clustersReport[currentWord])
        var epoch1Name = epochs[0]
        var epoch2Name = epochs[1]
        var wordList = {{ word_metrics|safe }}
        var wordDict = Object.assign({}, ...wordList.map((x) => ({[x.label]: x.value})));
        var innerRadius1 = -1
        var outerRadius1 = -1
        var lastActivePoint1 = -1
        var innerRadius2 = -1
        var outerRadius2 = -1
        var lastActivePoint2 = -1

        var ctx1 = document.getElementById('chart1');
        ctx1.height = window.innerHeight * 0.2;
        data = {{ initial_data[0] }}
        labels = []
        for (let i = 0; i < data.length; i++) {
            labels.push('Cluster ' + (i + 1))
        }

        var chart1 = new Chart(ctx1, {
        type: 'pie',
        responsive: false,
        width:10,
        height:15,
        scaleShowGridLines: false,
        data: {
            labels: labels,
            datasets: [{
            data: data,
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(0, 150, 50, 0.2)',
                'rgba(150, 0, 210, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(0, 150, 50, 1)',
                'rgba(150, 0, 210, 1)'
            ],
            borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                    legend: {
                        title: {
                            display: true,
                            text: currentWord + " (Epoch 1)",
                            padding: {
                                top: 10,
                                bottom: 10
                            },
                            font: {
                                size: 24
                            }
                        }
                    }
                }
            }
        });

        var ctx2 = document.getElementById('chart2');
        ctx2.height = window.innerHeight * 0.2;
        data = {{ initial_data[1] }}
        labels = []
        for (let i = 0; i < data.length; i++) {
            labels.push('Cluster ' + (i + 1))
        }

        var chart2 = new Chart(ctx2, {
        type: 'pie',
        responsive: false,
        width:10,
        height:15,
        scaleShowGridLines: false,
        data: {
            labels: labels,
            datasets: [{
            data: data,
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(0, 150, 50, 0.2)',
                'rgba(150, 0, 210, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(0, 150, 50, 1)',
                'rgba(150, 0, 210, 1)'
            ],
            borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                    legend: {
                        title: {
                            display: true,
                            text: currentWord + " (Epoch 2)",
                            padding: {
                                top: 10,
                                bottom: 10
                            },
                            font: {
                                size: 24
                            }
                        }
                    }
                }
            }
        });

        ctx1.onclick = function(evt){
            activePoints = chart1.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);

            if (activePoints.length < 1) {
                return
            }

            if (innerRadius1 == -1) {
                innerRadius1 = activePoints[0]['element'].innerRadius
            }
            if (outerRadius1 == -1) {
                outerRadius1 = activePoints[0]['element'].outerRadius
            }
            if (lastActivePoint1 != -1) {
                lastActivePoint1['element'].innerRadius = lastActivePoint1['element'].innerRadius - 20;
            }
            if (lastActivePoint1 != -1) {
                lastActivePoint1['element'].outerRadius = lastActivePoint1['element'].outerRadius - 20;
            }

            if (activePoints[0]['element'].innerRadius == innerRadius1) {
                activePoints[0]['element'].innerRadius = activePoints[0]['element'].innerRadius + 20;
                lastActivePoint1 = activePoints[0]
            }
            if (activePoints[0]['element'].outerRadius == outerRadius1) {
                activePoints[0]['element'].outerRadius = activePoints[0]['element'].outerRadius + 20;
                lastActivePoint1 = activePoints[0]
            }

            cluster1 = activePoints[0].index;
            possibleIndices = clustersReport[currentWord][epoch1Name][cluster1];
            shuffled = possibleIndices.sort(() => 0.5 - Math.random());
            selected = shuffled.slice(0, Math.min(5, possibleIndices.length));
            exampleText = "";
            for (i = 0; i < selected.length; i++) {
                exampleText += "<b>Example " + (i + 1) + '</b>' + '<br>' + corpus1[selected[i]] + '<br><br>'
            }
            document.getElementById("text1").innerHTML = exampleText;
            if (cluster1 != -1 && cluster2 != -1) {
                clusterChange = (clustersBetween[currentWord][cluster1][cluster2]).toFixed(3)
                if (clusterChange > 0.66) {
                    style = "<span style='color: red;'>"
                } else if (clusterChange < 0.33) {
                    style = "<span style='color: blue;'>"
                } else {
                    style = "<span style='color: orange;'>"
                }
                document.getElementById("cluster_change").innerHTML = style + 'Cluster change: <br>' + clusterChange + "</span>"  
            }
        };

        ctx2.onclick = function(evt){
            activePoints = chart2.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, false);

            if (activePoints.length < 1) {
                return
            }

            if (innerRadius2 == -1) {
                innerRadius2 = activePoints[0]['element'].innerRadius
            }
            if (outerRadius2 == -1) {
                outerRadius2 = activePoints[0]['element'].outerRadius
            }
            if (lastActivePoint2 != -1) {
                lastActivePoint2['element'].innerRadius = lastActivePoint2['element'].innerRadius - 20;
            }
            if (lastActivePoint2 != -1) {
                lastActivePoint2['element'].outerRadius = lastActivePoint2['element'].outerRadius - 20;
            }

            if (activePoints[0]['element'].innerRadius == innerRadius2) {
                activePoints[0]['element'].innerRadius = activePoints[0]['element'].innerRadius + 20;
                lastActivePoint2 = activePoints[0]
            }
            if (activePoints[0]['element'].outerRadius == outerRadius2) {
                activePoints[0]['element'].outerRadius = activePoints[0]['element'].outerRadius + 20;
                lastActivePoint2 = activePoints[0]
            }

            cluster2 = activePoints[0].index;
            possibleIndices = clustersReport[currentWord][epoch2Name][cluster2];
            shuffled = possibleIndices.sort(() => 0.5 - Math.random());
            selected = shuffled.slice(0, Math.min(5, possibleIndices.length));
            exampleText = "";
            for (i = 0; i < selected.length; i++) {
                exampleText += "<b>Example " + (i + 1) + '</b>' + '<br>' + corpus2[selected[i]] + '<br><br>'
            }
            document.getElementById("text2").innerHTML = exampleText;
            if (cluster1 != -1 && cluster2 != -1) {
                clusterChange = (clustersBetween[currentWord][cluster1][cluster2]).toFixed(3)
                if (clusterChange > 0.66) {
                    style = "<span style='color: red;'>"
                } else if (clusterChange < 0.33) {
                    style = "<span style='color: blue;'>"
                } else {
                    style = "<span style='color: orange;'>"
                }
                document.getElementById("cluster_change").innerHTML = style + 'Cluster change: <br>' + clusterChange + "</span>"  
            }
        };

        const field = document.getElementById('input');
        const ac = new Autocomplete(field, {
            data: wordList,
            maximumItems: 15,
            threshold: 1,
            onSelectItem: ({label, value}) => {
                currentWord = label;
                data1 = []
                for (let i = 0; i < clustersReport[currentWord][epoch1Name].length; i++) {
                    data1.push(clustersReport[currentWord][epoch1Name][i].length)
                }
                labels1 = []
                for (let i = 0; i < data1.length; i++) {
                    labels1.push('Cluster ' + (i + 1))
                }
                chart1.data.labels = labels1
                chart1.data.datasets[0].data = data1
                chart1.options.plugins.legend.title.text = currentWord + " (Epoch 1)"

                data2 = []
                for (let i = 0; i < clustersReport[currentWord][epoch2Name].length; i++) {
                    data2.push(clustersReport[currentWord][epoch2Name][i].length)
                }
                labels2 = []
                for (let i = 0; i < data2.length; i++) {
                    labels2.push('Cluster ' + (i + 1))
                }
                chart2.data.labels = labels2
                chart2.data.datasets[0].data = data2
                chart2.options.plugins.legend.title.text = currentWord + " (Epoch 2)"

                chart1.update();
                chart2.update();

                innerRadius1 = -1
                outerRadius1 = -1
                innerRadius2 = -1
                outerRadius2 = -1
                lastActivePoint1 = -1
                lastActivePoint2 = -1

                clusterChange = (wordDict[currentWord]).toFixed(3)
                if (clusterChange > 0.66) {
                    style = "<span style='color: red;'>"
                } else if (clusterChange < 0.33) {
                    style = "<span style='color: blue;'>"
                } else {
                    style = "<span style='color: orange;'>"
                }
                document.getElementById("word_change").innerHTML = style + 'Word change: <br>' + clusterChange + "</span>"
                document.getElementById("cluster_change").innerHTML = 'Cluster change: '
                document.getElementById("text1").innerHTML = "Examples from the chosen cluster will be shown here";
                document.getElementById("text2").innerHTML = "Examples from the chosen cluster will be shown here";
                cluster1 = -1
                cluster2 = -1
            }
        });
    </script>
</main>
{% endblock %}
